

No. 1 Peak Element

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int l = 0, n = nums.size();
        int h = n - 1;
        if(n == 0) {
            return -1;
        }
        if(n == 1) {
            return 0;
        }
        while(l <= h) {
            int mid = l + (h - l) / 2;
            bool left = isLegal(nums, mid - 1), right = isLegal(nums, mid + 1);
            if((!left && right && nums[mid] > nums[mid+1]) || (left && !right && nums[mid] > nums[mid-1])) { // 边界
                return mid;
            } 
            if(left && right && nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]) { // 峰值
                return mid;
            } else if(right && nums[mid] < nums[mid+1]) { //bigger side
                l = mid + 1;
            } else if(left && nums[mid] < nums[mid-1]) {
                h = mid - 1;
            }
        }
        return -1;
    }
    bool isLegal(vector<int> nums, int index) {
        if(index < 0 || index > nums.size() - 1) {
            return false;
        }
        return true;
    }
};

注：解释bigger side
如果出现了1 2 3 且mid是2，则检查右半部分，因为

No.2 Longest Substring Without Repeating Characters
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i = 0, j = 0, curr_max = 0, max = 0;
        string temp = "";
        while(i <= j && j < s.length()) {
            if(!stringContainsChar(temp, s[j])) {
                j++;
                curr_max++;
            } else {
                i++;
                curr_max--;
            }
            max = get_max(curr_max, max);
            temp = s.substr(i, j - i);
        }
        return max;
    }
    int get_max(int a, int b) {
        if(a > b) {
            return a;
        }
        return b;
    }
    bool stringContainsChar(string s, char ch) {
        for(int i = 0; i < s.length(); i++) {
            if(s[i] == ch) {
                return true;
            }
        }
        return false;
    }
};

理解与解释：
因为本题是最长子串，字符之间必须相邻，所以找子串的时候只能动字符串的首和尾。
一旦出现重复，首指针向右滑动一个，实际是个暴力遍历的算法。

*改进版*

No.3 Median of Two Sorted Arrays

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> mergedNums = merge(nums1, nums2);
        int n = mergedNums.size();
        if(n % 2) {
            return double(mergedNums[n/2]);
        }
        return (double(mergedNums[n/2])+double(mergedNums[n/2-1]))/2;
    }
    vector<int> merge(vector<int> nums1, vector<int> nums2) {
        int m = nums1.size(), n = nums2.size();
        int i = 0, j = 0;
        vector<int> res;
        while(i < m && j < n) {
            if(nums1[i] < nums2[j]) {
                res.push_back(nums1[i]);
                i++;
            } else {
                res.push_back(nums2[j]);
                j++;
            }
        }
        while(i < m) {
            res.push_back(nums1[i]);
            i++;
        }
        while(j < n) {
            res.push_back(nums2[j]);
            j++;
        }
        return res;
    }
};

解释：合并有序数组，然后取中间位置的数

No.4 Longest Palindromic Substring

No.5 3sum
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++) {
            if(i != 0 && nums[i] == nums[i-1]) {
                continue;
            }
            
            int j = i + 1, k = nums.size() - 1;
            while(j < nums.size() - 1 && k >= 0 && j < k) {
                if(nums[i] + nums[j] + nums[k] == 0) {
                    vector<int> temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[j]);
                    temp.push_back(nums[k]);
                    res.push_back(temp);
                    j++;
                    while(j < k && nums[j] ==  nums[j-1]) {
                        j++;
                    }
                } else if (nums[i] + nums[j] + nums[k] > 0) {
                    k--;
                } else {
                    j++;
                }
            }
        }
        return res;
    }
    
};

No.6 3Sum Closest
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int res, minDis = INT_MAX;
        for(int i = 0; i < nums.size(); i++) {
            if(i != 0 && nums[i] == nums[i-1]) {
                continue;
            }
            int j = i + 1, k = nums.size() - 1;
            while(j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == target) {
                    return sum;
                } else if(sum < target) {
                    j++;
                } else {
                    k--;
                }
                if(abs(target - sum) < minDis) {
                    minDis = abs(target - sum);
                    res = sum;
                }
            }
        }
        return res;
    }
};

No.7 Remove Nth Node From End of List
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(!head) {
            return NULL;
        }
        ListNode* slow = head, *fast = head;
        for(int count = 1; count <= n; count++) {
            fast = fast->next;
        }
        ListNode* pre = NULL;
        while(slow && fast) {
            pre = slow;
            slow = slow->next;
            fast = fast->next;
        }
        if(pre) {
            pre->next = slow->next;
            slow->next = NULL;
            return head;
        }
        return head->next;
    }
};

No.8 Valid Parentheses	

class Solution {
public:
    bool isValid(string s) {
        int n = s.length();
        if(n == 0) {
            return true;
        }
        if(n % 2) {
            return false;
        }
        set<char> left {'(', '[', '{'};
        set<char> right {')', ']', '}'};
        stack<char> st;
        for(int i = 0; i < s.length(); i++) {
            if(left.find(s[i]) != left.end()) {
                st.push(s[i]);
            } else { // right
                if(!st.empty()) {
                    char ll = st.top();
                    if(!isMatch(ll, s[i])) {
                        return false;
                    }
                    st.pop();
                } else {
                    return false;
                }
                
            }
        }
        if(st.empty()) {
            return true;
        }
        return false;
    }
    bool isMatch(char ch1, char ch2) {
        if((ch1 == '(' && ch2 == ')') || (ch1 == '[' && ch2 == ']') || 
           (ch1 == '{' && ch2 == '}')) {
            return true;
        }
        return false;
    }
};

No.9 Merge k Sorted Lists

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        queue<ListNode*> q;
        for(ListNode* node : lists) {
            q.push(node);
        }
        while(q.size() > 1) {
            ListNode* node1 = q.front(), *node2;
            q.pop();
            if(!q.empty()) {
                node2 = q.front();
                q.pop();
            }
            ListNode *mergedNode = mergeTwoLists(node1, node2);
            q.push(mergedNode);
        }
        if(q.size() == 1) {
            return q.front();
        }
        return NULL;
    }
    
    ListNode* mergeTwoLists(ListNode* node1, ListNode* node2) {
        if(!node1) {
            return node2;
        }
        if(!node2) {
            return node1;
        }
        ListNode *p = node1, *q = node2;
        ListNode *dummy = new ListNode(-1);
        ListNode *curr = dummy;
        while(p && q) {
            if(p->val < q->val) {
                curr->next = p;
                p = p->next;
            } else {
                curr->next = q;
                q = q->next;
            }
            curr= curr -> next;
        }
        while(p) {
            curr->next = p;
            p = p->next;
            curr = curr->next;
        }
        while(q) {
            curr->next = q;
            q = q->next;
            curr = curr->next;
        }
        return dummy->next;
    }
    
};

总结：本解法是采用分治法，将长度为k的节点列表，两两划分为k/2，k/4..., 直到剩下一个或两个链表，开始合并，两两合并，最终得到结果。
时间复杂度：O(n^2)

优化：采用计数排序的思想，用一个map统计k个链表中所有节点值出现的次数，同时记录全局最大和最小。
排序的过程是：在最大和最小之间遍历，然后去map里查当前值的次数（假设为m次），创建m个新节点并链接起来。
时间复杂度：O(n)

No.10 Search in Rotated Sorted Array

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0, h = nums.size() - 1;
        while(l <= h) {
            int mid = l + (h - l) / 2;
            if(nums[mid] == target) {
                return mid;
            }
            bool leftAscending = nums[l] <= nums[mid];
            if(leftAscending) {
                if(target >= nums[l] && target <= nums[mid]) {
                    h = mid - 1;
                } else {
                    l = mid + 1;
                }
            } else { // rightAscending
                if(target >= nums[mid] && target <= nums[h]) {
                    l = mid + 1;
                } else {
                    h = mid - 1;
                }
            }
        }
        return -1;
    }
};

理解：本题是一个数组查找的问题，查找问题的时间上界是O(n)，所以设计的算法应该优于O(n)。
充分利用数组部分有序的信息。
优化的思路为：通过一定的判断，每次丢弃一半的数组，则总时间复杂度为O(log n). 能够丢弃的原因是目标数字一定不在那一边。
通过test case可以看出，任意选择一个数字，该数字必将数组分成有序的和无序的两部分，如果目标数字落在有序的一侧，则丢弃另一侧，否则丢弃有序的一侧。

No. 11 Find First and Last Position of Element in Sorted Array

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res;
        int start = searchIndex(nums, target, "start");
        int end = searchIndex(nums, target, "end");
        res.push_back(start);
        res.push_back(end);
        return res;
    }
    int searchIndex(vector<int> nums, int target, string flag) {
        int l = 0, h = nums.size() - 1;
        if(flag == "start") {
             while(l <= h) {
                int mid = l + (h - l) / 2;
                if(nums[mid] > target || (nums[mid] == target && mid-1>=0 && 
                                          nums[mid] == nums[mid-1])) {
                    h = mid - 1;
                } else if(nums[mid] < target) {
                    l = mid + 1;
                } else {
                    return mid;
                }
            }
        } else { // end
           while(l <= h) {
                int mid = l + (h - l) / 2;
                if(nums[mid] > target) {
                    h = mid - 1;
                } else if(nums[mid] < target || (nums[mid] == target && 
                           mid+1<=nums.size()-1 && nums[mid] == nums[mid+1])) {
                    l = mid + 1;
                } else {
                    return mid;
                }
            } 
        }
        return -1;
    }
};

No.12 Search Insert Position

No.13 Combination Sum

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> temp;
        sort(candidates.begin(), candidates.end());
        combinationSum(candidates, target, temp, res, 0);
        return res;
    }
    void combinationSum(vector<int> nums, int target, vector<int>& temp,vector<vector<int>>& res, int start) {
        if(target == 0) {
            res.push_back(temp);
            return;
        }
        for(int i = start; i < nums.size(); i++) {
            if(nums[i] > target) {
                return;
            }
            temp.push_back(nums[i]);
            combinationSum(nums, target - nums[i], temp, res, i);
            temp.pop_back();
        }
    }
};

No. 14 Permutations

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<int> temp;
        vector<vector<int>> res;
        permute(nums, temp, res);
        return res;
    }
    void permute(vector<int> nums, vector<int>& temp, vector<vector<int>>& res) {
        if(temp.size() == nums.size()) {
            res.push_back(temp);
            return;
        }
        for(int i = 0; i < nums.size(); i++) {
            if(exitsNumInArray(temp, nums[i])) {
                continue;
            }
            temp.push_back(nums[i]);
            permute(nums, temp, res);
            temp.pop_back();
        }
    }
    bool exitsNumInArray(vector<int> nums, int k) {
        for(int num : nums) {
            if(num == k) {
                return true;
            }
        }
        return false;
    }
};

No.15 Jump Game
class Solution {
public:
    bool canJump(vector<int>& nums) {
        if(nums.size() == 0) {
            return true;
        }
        int reach = nums[0];
        for(int i = 1; i < nums.size() && reach >= i; i++) {
            if(i + nums[i] > reach) {
                reach = i + nums[i];
            }
        }
        return reach >= nums.size() - 1 ? true : false;
    }
};

注解：每个元素能到达的位置为 下标+元素值

No.16 Jump Game II

class Solution {
public:
    int jump(vector<int>& nums) {
        int farthest = 0, last = 0, jumps = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(i > last) { // exceed current reach
                last = farthest; // greedy, goto the farthest
                jumps++;
            }
            farthest = max(farthest, i + nums[i]); // record currently farthest 
        }
        return jumps;
    }
};
注解：
1. 能到达
由于i + nums[i]为每个元素能到达的最远位置，那么从前往后遍历的过程中，我们就能得到到位置i为止，能到达的最远位置，即farthest
2. 已到达
last记录已经到达的位置，在遍历的时候，遍历指针i一旦超过last的到达范围，我们就需要继续往前跳，跳的策略是贪心策略，即跳farthest步；每跳都跳的最远，则总步数最少。

No.17 Subsets
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        subsets(nums, 0, temp, res);
        return res;
    }
    void subsets(vector<int> nums, int start, vector<int>& temp, vector<vector<int>>& res) {
        res.push_back(temp);
        for(int i = start; i < nums.size(); i++) {
            temp.push_back(nums[i]);
            subsets(nums, i+1, temp, res); // i+1
            temp.pop_back();
        }
    }
};
注解：为了防止res中加入重复的序列，我们先把nums排序，生成子集的时候从小到大生成，就不会出现重复的情况，如子集已经包含1，则只能加2或3。

No. 18 Unique Paths
class Solution {
public:
    int uniquePaths(int m, int n) {
        const int M = m;
        const int N = n;
        int dp[M+1][N+1];
        for(int i = 0; i <= M; i++) {
            for(int j = 0; j <= N; j++) {
                dp[i][j] = 0;
            }
        }
        dp[1][1] = 1;
        for(int i = 1; i <= M; i++) {
            for(int j = 1; j <= N; j++) {
                if(i == 1 && j == 1) {
                    continue;
                }
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[M][N];
    }
};

No.19 Merge Intervals
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> res;
        if(intervals.size()==0) {
            return res;
        }
        sort(intervals.begin(), intervals.end());
        res.push_back(intervals[0]);
        for(int i = 1; i < intervals.size(); i++) {
            vector<int> curr = res.back();
            if(overlap(curr, intervals[i])) {
                vector<int> tmp = merge(curr, intervals[i]);
                res.pop_back();
                res.push_back(tmp);
            } else {
                res.push_back(intervals[i]);
            }
        }
        return res;
    }
    bool overlap(vector<int> inte1, vector<int> inte2) {
        if(inte1[1] >= inte2[0]) {
            return true;
        }
        return false;
    }
    vector<int> merge(vector<int> inte1, vector<int> inte2) {
        vector<int> res;
        res.push_back(min(inte1[0], inte2[0]));
        res.push_back(max(inte1[1], inte2[1]));
        return res;
    }
};

---------------动态规划汇总------------------
5. Longest Palindromic Substring

reference:https://blog.csdn.net/u013309870/article/details/70742315

class Solution {
public:
    string longestPalindrome(string s) {
        if(s.length() == 0 || s.length() == 1) {
            return s;
        }
        const int N = s.length();
        bool dp[N+1][N+1] = {false};
        // substring s[i...j]
        for(int j = 1; j <= N; j++) {
            for(int i = 1; i <= j; i++) {
                if(i == j) {
                    dp[j][i] = true;
                } else if(i + 1 == j) {
                    dp[j][i] = s[i-1] == s[j-1];
                } else { // j > i+1
                    dp[j][i] = s[i-1] == s[j-1] && dp[j-1][i+1];
                }
            }
        }
        string res = "";
        for(int j = 1; j <= N; j++) {
            for(int i = 1; i <= j; i++) {
                if(dp[j][i] && res.length() < j - i + 1) {
                    res = s.substr(i-1, j - i + 1);
                } 
            }
        }
        return res;
    }
};

53. Maximum Subarray

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        const int N = nums.size();
        if(N == 0) {
            return 0;
        }
        vector<int> dp(N); // maximum sum of subsequence that ends with nums[i]
        dp[0] = nums[0];
        for(int i = 1; i < N; i++) {
            dp[i] = max(dp[i-1] + nums[i], nums[i]);
        }
        return *max_element(dp.begin(), dp.end());
    }
};

14. Longest Common Prefix

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.size() == 0) {
            return "";
        }
        if(strs.size() == 1) {
            return strs[0];
        }
        int shortestLen = strs[0].length();
        for(string s : strs) {
            if(s.length() < shortestLen) {
                shortestLen = s.length();
            }
        }
        int l = 0, h = shortestLen;
        string res = "";
        while(l < h) {
            int mid = l + (h - l) / 2;
            if(isPrefix(strs, l, mid - l + 1)) {
                res += strs[0].substr(l, mid - l + 1);
                l = mid + 1; 
            } else {
                h = mid; 
            }
        }
        return res;
    }
    bool isPrefix(vector<string>& strs, int i, int len) {
        string tmp = strs[0].substr(i, len);
        for(string s : strs) {
            if(s.substr(i, len) != tmp) {
                return false;
            }
        }
        return true;
    }
};

134. Gas Station
class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int N = gas.size();
        vector<bool> canStart(N, true);
        for(int i = 0; i < N; i++) {
            if(gas[i] < cost[i]) {
                canStart[i] = false;
            }
        }
        int start = 0;
        for(int i = 0; i < N; i++) {
            if(canStart[i]) {
                start = i;
                break;
            }
        }
        for(int i = start; i < N; i++) {
            if(goFromStation(gas, cost, i)) {
                return i;
            }
        }
        return -1;
    }
    bool goFromStation(vector<int>& gas, vector<int>& cost, int index) {
        int tank = 0, i = index;
        while(1) {
            tank += gas[i];
            tank -= cost[i]; // trying to next
            if(tank < 0) {
                return false;
            }
            if(i == gas.size() - 1) {
                i = 0;
            } else {
                i++; // go to next station
            }
            if(i == index) {
                break;
            }
        }
        return true;
    }
};

3. Longest Substring Without Repeating Characters
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s == "" || s.length() == 0) {
            return 0;
        }
        map<char, int> m; // 某字符是最右下标
        const int n = s.length();
        vector<int> dp(n, 0); // 以i结尾的字符串的最长不重复子串
        dp[0] = 1;
        int start = 0;
        m[s[0]] = 0;
        for(int i = 1; i < n; i++) {
            if(exists(s, start, i - 1, s[i])) {
                dp[i] = i - m[s[i]];
                start = m[s[i]] + 1;
                
            } else {
                dp[i] = dp[i-1] + 1;
            }
            m[s[i]] = i;
        }
        return *max_element(dp.begin(), dp.end());
    }
    bool exists(string s, int start, int end, char ch) {
        if(start > end) {
            return false;
        }
        for(int i = start; i <= end; i++) {
            if(s[i] == ch) {
                return true;
            }
        }
        return false;
    }
};

739. Daily Temperatures

class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& T) {
        stack<int> s;
        const int n = T.size();
        vector<int> res(n,0);
        for(int i = 0; i < n; i++) {
            while(!s.empty() && T[s.top()] < T[i]) { // bigger temp
                int peak = s.top(); s.pop();
                res[peak] = i - peak;
            }
            s.push(i); // store every index to see if there is bigger temp after
        }
        return res;
    }
};

347. Top K Frequent Elements

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        if(nums.size() == 0 || nums.size() == 1) {
            return nums;
        }
        map<int,int> m;
        for(int num : nums) {
            m[num] = 0;
        }
        for(int num : nums) {
            m[num]++;
        }
        const int distCount = m.size();
        const int n = nums.size();
        vector<vector<int> > bucket(n+1);
        for(map<int,int>::iterator iter = m.begin(); iter != m.end(); iter++) {
            bucket[iter->second].push_back(iter->first);
         }
        vector<int> res;
        for(int i = n; i >= 0; i--) {
            for(int j = 0; j < bucket[i].size(); j++) {
                res.push_back(bucket[i][j]); 
                k--;
                if(k == 0) {
                    return res;
                }
            }
            
        }
        return res;      
    }

10. Regular Expression Matching

class Solution {
public:
    bool isMatch(string s, string p) {
        if(s == p) {
            return true;
        }
        bool isFirstMatch = false;
        if(s.length() > 0 && p.length() > 0 && (s[0] == p[0] || p[0] == '.')) {
            isFirstMatch = true;
        }
        if(p[1] == '*') {
            return isFirstMatch && isMatch(s.substr(1, s.length() - 1), p) // match one or more
                || p.length() >= 2 && isMatch(s, p.substr(2, p.length() - 2)); // not match any
        }
        // s[i] matches p[j] and p[j+1] is not *
        return isFirstMatch && 
            isMatch(s.substr(1, s.length() - 1), p.substr(1, p.length() - 1));
    }
};

114. 二叉树展开为链表
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if(!root) {
            return;
        }
        stack<TreeNode*> st;
        TreeNode* node = root;
        while(node) {
            if(node->right) {
                st.push(node->right);
            }
            TreeNode* lchild = node->left;
            if(lchild) {
                node->right = lchild;
                node->left = NULL;
                node = lchild;
            } else if(!st.empty()) {
                TreeNode* next = st.top();
                st.pop();
                node->right = next;
                node->left = NULL;
                node = next;
            } else {
                node = NULL;
            }
        }
        
    }
};

744. 寻找比目标字母大的最小字母
class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        char res  = ' ';
        if(letters.size() == 0) {
            return res;
        }
        int l = 0, h = letters.size() - 1;
        while(l < h) {
            int mid = l + (h - l) / 2;
            if(letters[mid] > target) {
                h = mid;
            } else {
                l = mid + 1;
            }
        }
        res = letters[l] > target ? letters[l] : letters[0];
        return res;
    }
};

322. 零钱兑换
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if(amount == 0) {
            return 0;
        }
        int dp[amount+1];
        for(int i = 0; i <= amount; i++) {
            dp[i] = amount + 1;
        }
        dp[0] = 0;
        for(int i = 1; i <= amount; i++) {
            for(int coin : coins) {
                if(i >= coin) {
                    dp[i] = min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        return dp[amount] <= amount ? dp[amount] : -1;
    }
};

96. 不同的二叉搜索树
// 分析：取任意一个数字（根）将数组分成两部分
// 该数组能形成多少个不同的二叉搜索树（原问题）
// 取决于两个子数组（即左右子树）能形成多少个不同的二叉搜索树（子问题）
// 利用动态规划解决
// 含义：G[i]表示长度为i的数组能形成多少个...
// 递推式：[1...i]每一个数字都可以作为根，形成不同的二叉搜索树
// G[i] += G[j - 1] * G[i - j], for all 1 <= j <= i
// 解释：G[j - 1] 和 G[i - j]分别表示左、右子树，二者是乘法关系
class Solution {
public:
    int numTrees(int n) {
        int G[n + 1];
        memset(G, 0, (n + 1) * sizeof(int));
        G[0] = 1; // 空树
        G[1] = 1; // 只有一个节点
        for(int i = 2; i <= n; i++) {
            for(int j = 1; j <= i; j++) {
                G[i] += G[j - 1] * G[i - j];
            }
        }
        return G[n];
    }
};

115. 不同的子序列
class Solution {
public:
    int numDistinct(string s, string t) {
        const int m = s.length(), n = t.length();
        long int dp[m+1][n+1];
        for(int i = 0; i <= m; i++) {
            for(int j = 0; j <= n; j++) {
                dp[i][j] = 0;
            }
        }
        for(int i = 0; i <= m; i++) {
            dp[i][0] = 1; // 空串是任何串的子序列
        }
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(s[i-1] == t[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
                } else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[m][n];
    }
};

97. 交错字符串
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        const int m = s1.length(), n = s2.length(), t = s3.length();
        if(m + n < t) {
            return false;
        } 
        bool dp[m+1][n+1]; // s1[1...i] and s2[1...j] can make s3[1...i+j] or not
        dp[0][0] = true;
        for(int i = 1; i <= m; i++) {
            if(matches(s1, i, s3, i)) {
                dp[i][0] = dp[i-1][0];
            } else {
                dp[i][0] = false;
            }
        }
        for(int i = 1; i <= n; i++) {
            if(matches(s2, i, s3, i)) {
                dp[0][i] = dp[0][i-1];
            } else {
                dp[0][i] = false;
            }
        }
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                bool flag = false;
                if(matches(s1, i, s3, i + j)) { // 当前匹配, 结果取决于子问题是否成立
                    dp[i][j] = dp[i - 1][j];
                    flag = dp[i][j];
                } 
                if(!flag && matches(s2, j, s3, i + j)) {
                    dp[i][j] = dp[i][j - 1];
                    flag = dp[i][j];
                }
                if(!flag) {
                    dp[i][j] = false;
                }
            }
        }
        return dp[m][n];
    }
    bool matches(string s1, int i, string s2, int j) {
        if(i == 0 && j == 0) {
            return true;
        } else if(i == 0) {
            return false;
        } else if(j == 0) {
            return false;
        }
        if(s1[i - 1] == s2[j - 1]) {
            return true;
        }
        return false;
    }
};

5. 最长回文子串
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.empty()) {
            return "";
        }
        const int n = s.length();
        bool dp[n][n] = {false};
        int left = 0, len = 1;
        for(int i = 0; i < n; i++) {
            dp[i][i] = true;
            for(int j = 0; j < i; j++) {
                dp[j][i] = s[j] == s[i] && (i - j < 2 || dp[j + 1][i - 1]);
                if(dp[j][i] && i - j + 1 > len) {
                    left = j;
                    len = i - j + 1;
                }
            }
        }
        return s.substr(left, len);
    }
};

Algorithm makes me feel stupid. Never copy code ever. Never stop trying.

32. 最长有效括号

class Solution {
public:
    int longestValidParentheses(string s) {
        const int n = s.length();
        int dp[n + 1];
        memset(dp, 0, (n + 1) * sizeof(int));
        for(int i = 2; i <= n; i++) {
            if(s[i - 1] == ')') { // update ) only cuz valid sub seq ends with ) only
                if(s[i - 2] == '(') { // ...()...
                    dp[i] = dp[i - 2] + 2;
                } else if(i - dp[i - 1] >= 2 && s[i - dp[i - 1] - 2] == '('){ // ...))
                    dp[i] = dp[i - 1] + 2 +  dp[i - dp[i - 1] - 2]; // ...((...))...
                } 
            }
        }
        vector<int> res(dp, dp + n + 1);
        return *max_element(res.begin(), res.end());
    }
};

53. 最大子序和
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        const int n = nums.size();
        if(n == 0) {
            return 0;
        }
        int dp[n];
        dp[0] = nums[0];
        for(int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] > 0 ? dp[i - 1] + nums[i] : nums[i];
        }
        vector<int> res(dp, dp + n);
        return *max_element(res.begin(), res.end());
    }
};

152. 乘积最大子序列
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        const int n = nums.size();
        if(n == 0) {
            return 0;
        }
        vector<int> bigger, smaller;
        bigger.push_back(nums[0]);
        smaller.push_back(nums[0]);
        for(int i = 1; i < n; i++) {
            int big = get_max(bigger[i - 1] * nums[i], smaller[i - 1] * nums[i], nums[i]);
            int small = get_min(bigger[i - 1] * nums[i], smaller[i - 1] * nums[i], nums[i]);
            bigger.push_back(big);
            smaller.push_back(small);
        }
        return *max_element(bigger.begin(), bigger.end());
    }
    int get_max(int a, int b, int c) {
        int res = max(a, b);
        return max(res, c);
    }
    int get_min(int a, int b, int c) {
        int res = min(a, b);
        return min(res, c);
    }
};

70. 爬楼梯
class Solution {
public:
    int climbStairs(int n) {
        if(n <= 2) {
            return n;
        }
        int dp[n]; // dp[i]表示爬到当前层有多少种方案
        dp[0] = 1, dp[1] = 2;
        for(int i = 2; i < n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2]; // 一次爬两层和一次爬一层到当前层
        }
        return dp[n - 1];
    }
};

91. 解码方法
class Solution {
public:
    int numDecodings(string s) {
        const int n = s.length();
        int dp[n + 1];
        memset(dp, 0, (n + 1) * sizeof(int));
        dp[0] = 1, dp[1] = s[0] == '0' ? 0: 1;
        for(int i = 2; i <= n; i++) {
            if(s[i - 1] != '0') {
                dp[i] += dp[i - 1]; // 一个数字单独解码
            }
            if(s[i - 2] == '1' || (s[i - 2] == '2' && s[i - 1] <= '6')) {
                dp[i] += dp[i - 2]; // 两个数字组合解码
            }
        }
        return dp[n];        
    }
};

131. 分割回文串
class Solution {
public:
    vector<vector<string>> partition(string s) {
        const int n = s.length();
        vector<vector<bool>> dp(n, vector<bool> (n, false)); // dp[i][j]:s[j...i]是否为回文串
        for(int i = 0; i < n; i++) {
            for(int j = 0; j <= i; j++) {
                // dp[j][i] = isPalindrome(s.substr(j, i - j + 1))
                // 暴力法需要判断每一个可能的子串是否是回文串【重复计算】
                // 将计算结果保存在dp数组中，提高效率
                dp[i][j] = s[i] == s[j] && (i - j < 2 || dp[i - 1][j + 1]);
            }
        }
        vector<vector<string>> res;
        vector<string> temp;
        dfs(s, 0, dp, res, temp);
        return res;
    }
    void dfs(string s, int start, vector<vector<bool>> dp, vector<vector<string>>& res, vector<string> temp) {
        if(start == s.length()) {
            res.push_back(temp);
            temp.clear();
            return;
        }
        for(int j = start; j < s.length(); j++) {
            if(dp[j][start]) {
                temp.push_back(s.substr(start, j + 1 - start));
                dfs(s, j + 1, dp, res, temp);
                temp.pop_back();
            } 
        }
    }
};

132. 分割回文串 II
class Solution {
public:
    int minCut(string s) {
        const int n = s.length();
        vector<vector<bool>> dp(n, vector<bool> (n, false)); // dp[i][j]:s[j...i]是否为回文串
        int minCut[n]; // minCut[j]:s[0...j]最少分割次数
        for(int i = 0; i < n; i++) {
            minCut[i] = i;
        }
        for(int i = 0; i < n; i++) {
            for(int j = 0; j <= i; j++) {
                dp[i][j] = s[i] == s[j] && (i - j < 2 || dp[i - 1][j + 1]);
                if(dp[i][j]) {
                    minCut[i] = j == 0 ? 0 : min(minCut[i], minCut[j - 1] + 1);
                }
            }
        }
        return minCut[n - 1];
    }
};

139. 单词拆分
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        const int n = s.length();
        int dp[n + 1] = {false}; // dp[i]:s[i]和s[i+1]处是否可切分
        dp[0] = true; // 单词的开头可切分
        for(int i = 0; i < n; i++) {
            for(int j = 0; j <= i; j++) { // s[j...i]
                string sub = s.substr(j, i - j + 1);
                if(exits(wordDict, sub)) {
                    dp[i + 1] = dp[i + 1] || dp[j]; // j = i + 1 - (i - j +1)
                }
            }
        }
        return dp[n];
    }
    bool exits(vector<string>& wordDict, string s) {
        if(find(wordDict.begin(), wordDict.end(), s) != wordDict.end()) {
            return true;
        }
        return false;
    }
};

140. 单词拆分 II
