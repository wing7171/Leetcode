

No. 1 Peak Element

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int l = 0, n = nums.size();
        int h = n - 1;
        if(n == 0) {
            return -1;
        }
        if(n == 1) {
            return 0;
        }
        while(l <= h) {
            int mid = l + (h - l) / 2;
            bool left = isLegal(nums, mid - 1), right = isLegal(nums, mid + 1);
            if((!left && right && nums[mid] > nums[mid+1]) || (left && !right && nums[mid] > nums[mid-1])) { // 边界
                return mid;
            } 
            if(left && right && nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]) { // 峰值
                return mid;
            } else if(right && nums[mid] < nums[mid+1]) { //bigger side
                l = mid + 1;
            } else if(left && nums[mid] < nums[mid-1]) {
                h = mid - 1;
            }
        }
        return -1;
    }
    bool isLegal(vector<int> nums, int index) {
        if(index < 0 || index > nums.size() - 1) {
            return false;
        }
        return true;
    }
};

注：解释bigger side
如果出现了1 2 3 且mid是2，则检查右半部分，因为

No.2 Longest Substring Without Repeating Characters
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i = 0, j = 0, curr_max = 0, max = 0;
        string temp = "";
        while(i <= j && j < s.length()) {
            if(!stringContainsChar(temp, s[j])) {
                j++;
                curr_max++;
            } else {
                i++;
                curr_max--;
            }
            max = get_max(curr_max, max);
            temp = s.substr(i, j - i);
        }
        return max;
    }
    int get_max(int a, int b) {
        if(a > b) {
            return a;
        }
        return b;
    }
    bool stringContainsChar(string s, char ch) {
        for(int i = 0; i < s.length(); i++) {
            if(s[i] == ch) {
                return true;
            }
        }
        return false;
    }
};

理解与解释：
因为本题是最长子串，字符之间必须相邻，所以找字串的时候只能动字符串的首和尾。
一旦出现重复，首指针向右滑动一个，实际是个暴力遍历的算法。

*改进版*

No.3 Median of Two Sorted Arrays

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> mergedNums = merge(nums1, nums2);
        int n = mergedNums.size();
        if(n % 2) {
            return double(mergedNums[n/2]);
        }
        return (double(mergedNums[n/2])+double(mergedNums[n/2-1]))/2;
    }
    vector<int> merge(vector<int> nums1, vector<int> nums2) {
        int m = nums1.size(), n = nums2.size();
        int i = 0, j = 0;
        vector<int> res;
        while(i < m && j < n) {
            if(nums1[i] < nums2[j]) {
                res.push_back(nums1[i]);
                i++;
            } else {
                res.push_back(nums2[j]);
                j++;
            }
        }
        while(i < m) {
            res.push_back(nums1[i]);
            i++;
        }
        while(j < n) {
            res.push_back(nums2[j]);
            j++;
        }
        return res;
    }
};

解释：合并有序数组，然后取中间位置的数

No.4 Longest Palindromic Substring

No.5 3sum
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++) {
            if(i != 0 && nums[i] == nums[i-1]) {
                continue;
            }
            
            int j = i + 1, k = nums.size() - 1;
            while(j < nums.size() - 1 && k >= 0 && j < k) {
                if(nums[i] + nums[j] + nums[k] == 0) {
                    vector<int> temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[j]);
                    temp.push_back(nums[k]);
                    res.push_back(temp);
                    j++;
                    while(j < k && nums[j] ==  nums[j-1]) {
                        j++;
                    }
                } else if (nums[i] + nums[j] + nums[k] > 0) {
                    k--;
                } else {
                    j++;
                }
            }
        }
        return res;
    }
    
};

No.6 3Sum Closest
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int res, minDis = INT_MAX;
        for(int i = 0; i < nums.size(); i++) {
            if(i != 0 && nums[i] == nums[i-1]) {
                continue;
            }
            int j = i + 1, k = nums.size() - 1;
            while(j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == target) {
                    return sum;
                } else if(sum < target) {
                    j++;
                } else {
                    k--;
                }
                if(abs(target - sum) < minDis) {
                    minDis = abs(target - sum);
                    res = sum;
                }
            }
        }
        return res;
    }
};

No.7 Remove Nth Node From End of List
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(!head) {
            return NULL;
        }
        ListNode* slow = head, *fast = head;
        for(int count = 1; count <= n; count++) {
            fast = fast->next;
        }
        ListNode* pre = NULL;
        while(slow && fast) {
            pre = slow;
            slow = slow->next;
            fast = fast->next;
        }
        if(pre) {
            pre->next = slow->next;
            slow->next = NULL;
            return head;
        }
        return head->next;
    }
};

No.8 Valid Parentheses	

class Solution {
public:
    bool isValid(string s) {
        int n = s.length();
        if(n == 0) {
            return true;
        }
        if(n % 2) {
            return false;
        }
        set<char> left {'(', '[', '{'};
        set<char> right {')', ']', '}'};
        stack<char> st;
        for(int i = 0; i < s.length(); i++) {
            if(left.find(s[i]) != left.end()) {
                st.push(s[i]);
            } else { // right
                if(!st.empty()) {
                    char ll = st.top();
                    if(!isMatch(ll, s[i])) {
                        return false;
                    }
                    st.pop();
                } else {
                    return false;
                }
                
            }
        }
        if(st.empty()) {
            return true;
        }
        return false;
    }
    bool isMatch(char ch1, char ch2) {
        if((ch1 == '(' && ch2 == ')') || (ch1 == '[' && ch2 == ']') || 
           (ch1 == '{' && ch2 == '}')) {
            return true;
        }
        return false;
    }
};

No.9 Merge k Sorted Lists

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        queue<ListNode*> q;
        for(ListNode* node : lists) {
            q.push(node);
        }
        while(q.size() > 1) {
            ListNode* node1 = q.front(), *node2;
            q.pop();
            if(!q.empty()) {
                node2 = q.front();
                q.pop();
            }
            ListNode *mergedNode = mergeTwoLists(node1, node2);
            q.push(mergedNode);
        }
        if(q.size() == 1) {
            return q.front();
        }
        return NULL;
    }
    
    ListNode* mergeTwoLists(ListNode* node1, ListNode* node2) {
        if(!node1) {
            return node2;
        }
        if(!node2) {
            return node1;
        }
        ListNode *p = node1, *q = node2;
        ListNode *dummy = new ListNode(-1);
        ListNode *curr = dummy;
        while(p && q) {
            if(p->val < q->val) {
                curr->next = p;
                p = p->next;
            } else {
                curr->next = q;
                q = q->next;
            }
            curr= curr -> next;
        }
        while(p) {
            curr->next = p;
            p = p->next;
            curr = curr->next;
        }
        while(q) {
            curr->next = q;
            q = q->next;
            curr = curr->next;
        }
        return dummy->next;
    }
    
};

总结：本解法是采用分治法，将长度为k的节点列表，两两划分为k/2，k/4..., 直到剩下一个或两个链表，开始合并，两两合并，最终得到结果。
时间复杂度：O(n^2)

优化：采用计数排序的思想，用一个map统计k个链表中所有节点值出现的次数，同时记录全局最大和最小。
排序的过程是：在最大和最小之间遍历，然后去map里查当前值的次数（假设为m次），创建m个新节点并链接起来。
时间复杂度：O(n)

No.10 Search in Rotated Sorted Array

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0, h = nums.size() - 1;
        while(l <= h) {
            int mid = l + (h - l) / 2;
            if(nums[mid] == target) {
                return mid;
            }
            bool leftAscending = nums[l] <= nums[mid];
            if(leftAscending) {
                if(target >= nums[l] && target <= nums[mid]) {
                    h = mid - 1;
                } else {
                    l = mid + 1;
                }
            } else { // rightAscending
                if(target >= nums[mid] && target <= nums[h]) {
                    l = mid + 1;
                } else {
                    h = mid - 1;
                }
            }
        }
        return -1;
    }
};

理解：本题是一个数组查找的问题，查找问题的时间上界是O(n)，所以设计的算法应该优于O(n)。
充分利用数组部分有序的信息。
优化的思路为：通过一定的判断，每次丢弃一半的数组，则总时间复杂度为O(log n). 能够丢弃的原因是目标数字一定不在那一边。
通过test case可以看出，任意选择一个数字，该数字必将数组分成有序的和无序的两部分，如果目标数字落在有序的一侧，则丢弃另一侧，否则丢弃有序的一侧。

No. 11 Find First and Last Position of Element in Sorted Array

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res;
        int start = searchIndex(nums, target, "start");
        int end = searchIndex(nums, target, "end");
        res.push_back(start);
        res.push_back(end);
        return res;
    }
    int searchIndex(vector<int> nums, int target, string flag) {
        int l = 0, h = nums.size() - 1;
        if(flag == "start") {
             while(l <= h) {
                int mid = l + (h - l) / 2;
                if(nums[mid] > target || (nums[mid] == target && mid-1>=0 && 
                                          nums[mid] == nums[mid-1])) {
                    h = mid - 1;
                } else if(nums[mid] < target) {
                    l = mid + 1;
                } else {
                    return mid;
                }
            }
        } else { // end
           while(l <= h) {
                int mid = l + (h - l) / 2;
                if(nums[mid] > target) {
                    h = mid - 1;
                } else if(nums[mid] < target || (nums[mid] == target && 
                           mid+1<=nums.size()-1 && nums[mid] == nums[mid+1])) {
                    l = mid + 1;
                } else {
                    return mid;
                }
            } 
        }
        return -1;
    }
};

No.12 Search Insert Position

No.13 Combination Sum

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> temp;
        sort(candidates.begin(), candidates.end());
        combinationSum(candidates, target, temp, res, 0);
        return res;
    }
    void combinationSum(vector<int> nums, int target, vector<int>& temp,vector<vector<int>>& res, int start) {
        if(target == 0) {
            res.push_back(temp);
            return;
        }
        for(int i = start; i < nums.size(); i++) {
            if(nums[i] > target) {
                return;
            }
            temp.push_back(nums[i]);
            combinationSum(nums, target - nums[i], temp, res, i);
            temp.pop_back();
        }
    }
};

No. 14 Permutations

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<int> temp;
        vector<vector<int>> res;
        permute(nums, temp, res);
        return res;
    }
    void permute(vector<int> nums, vector<int>& temp, vector<vector<int>>& res) {
        if(temp.size() == nums.size()) {
            res.push_back(temp);
            return;
        }
        for(int i = 0; i < nums.size(); i++) {
            if(exitsNumInArray(temp, nums[i])) {
                continue;
            }
            temp.push_back(nums[i]);
            permute(nums, temp, res);
            temp.pop_back();
        }
    }
    bool exitsNumInArray(vector<int> nums, int k) {
        for(int num : nums) {
            if(num == k) {
                return true;
            }
        }
        return false;
    }
};